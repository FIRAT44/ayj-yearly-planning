from __future__ import annotations

import json
import math
from datetime import datetime, time, timedelta, timezone
import sqlite3
import pandas as pd
from typing import Optional
from pathlib import Path

try:
    from zoneinfo import ZoneInfo
except Exception:
    ZoneInfo = None  # type: ignore

# =====================
# Sabitler / Ayarlar
# =====================
CONFIG_PATH = Path("daily_greeting_config.json")
DEFAULT_CONFIG = {
    "scheduled_time": "09:00",
    "last_display_date": None,
    "last_update_message": "",
}
TIMEZONE = "Europe/Istanbul"
TIME_INPUT_STEP = timedelta(minutes=1)
GREETING_PREFIX = "Merhaba!"

# Yenileme stratejisi:
# - GENEL: her 30 sn'de bir yenile (arka planda kalsa bile yakalar)
# - PENCERE: tetik saatine -120s..+60s aralığında 2 sn'de bir yenile
# - TEK ATIM: tam tetik anına setTimeout (ceil + min 1 ms)
GENERAL_REFRESH_SEC = 30
NEAR_WINDOW_BEFORE_SEC = 120
NEAR_WINDOW_AFTER_SEC = 60
NEAR_WINDOW_REFRESH_SEC = 2
GRACE_SECONDS = 1  # sınır toleransı

# =====================
# Yardımcılar
# =====================
def _load_config() -> dict:
    if not CONFIG_PATH.exists():
        return DEFAULT_CONFIG.copy()
    try:
        data = json.loads(CONFIG_PATH.read_text(encoding="utf-8"))
    except Exception:
        return DEFAULT_CONFIG.copy()
    last_update_message = data.get("last_update_message")
    if last_update_message is None:
        last_update_message = DEFAULT_CONFIG["last_update_message"]
    elif not isinstance(last_update_message, str):
        last_update_message = str(last_update_message)
    return {
        "scheduled_time": str(data.get("scheduled_time", DEFAULT_CONFIG["scheduled_time"])),
        "last_display_date": data.get("last_display_date"),
        "last_update_message": last_update_message,
    }


def _save_config(config: dict) -> None:
    CONFIG_PATH.write_text(json.dumps(config, indent=2, ensure_ascii=False), encoding="utf-8")


def _parse_time(value: str) -> time:
    try:
        hour, minute = value.split(":", 1)
        return time(int(hour), int(minute))
    except Exception:
        default_time = DEFAULT_CONFIG["scheduled_time"]
        return time.fromisoformat(default_time)


def _now_istanbul() -> datetime:
    """İstanbul zamanını güvenle döndür.
    - ZoneInfo varsa onu kullan,
    - yoksa UTC+3 sabit ofsete düş (uç sunucularda tzdata olmayabiliyor)."""
    if ZoneInfo is not None:
        try:
            return datetime.now(ZoneInfo(TIMEZONE))
        except Exception:
            pass
    # Fallback: UTC +3 (DST farklarını takip etmez ama güvenli bir “görünsün” çözümü)
    return datetime.now(timezone.utc) + timedelta(hours=3)


def _render_live_clock(st) -> None:
    """Saniyelik canlı saat; app'i yeniden çalıştırmadan günceller (görsel amaçlı)."""
    try:
        from streamlit.components.v1 import html as _html
    except Exception:
        now = _now_istanbul()
        st.info(f"Saat: {now.strftime('%H:%M:%S')}")
        return

    _html(
        """
        <div id="live-clock" style="
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
            font-size: 14px; background:#f0f2f6; color:#1f2328;
            padding:8px 12px; border-radius:6px; display:inline-block;">
            Saat: --:--:--
        </div>
        <script>
        const el = document.getElementById('live-clock');
        function pad(n){return n<10?('0'+n):n}
        function tick(){
          const d = new Date();
          el.textContent = `Saat: ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
        }
        tick();
        setInterval(tick, 1000);
        </script>
        """,
        height=40,
    )


def _ensure_autorefresh(st, seconds: int) -> None:
    """Periyodik yenilemeyi garanti et.
    Önce streamlit_autorefresh denenir; olmazsa minik JS reload kullanılır."""
    try:
        from streamlit_autorefresh import st_autorefresh  # type: ignore
        st_autorefresh(interval=max(1000, int(seconds) * 1000), key=f"autorf_{seconds}")
        return
    except Exception:
        pass
    try:
        from streamlit.components.v1 import html as _html  # type: ignore
        _html(
            f"<script>setTimeout(()=>window.location.reload(), {max(1000, int(seconds)*1000)});</script>",
            height=0, width=0,
        )
    except Exception:
        pass


def _debug_line(st, enabled: bool, label: str, value) -> None:
    msg = f"[DEBUG] {label}: {value}"
    try:
        print(msg)
    except Exception:
        pass
    if enabled:
        try:
            st.caption(msg)
        except Exception:
            pass


def _schedule_exact_reload(st, now: datetime, target: datetime, debug: bool = False) -> None:
    """Tam tetik anında tek atımlık reload."""
    try:
        delta_ms = max(1, math.ceil((target - now).total_seconds() * 1000.0))
        if delta_ms <= 0:
            return
        from streamlit.components.v1 import html as _html  # type: ignore
        _html(
            f"<script>setTimeout(()=>window.location.reload(), {delta_ms});</script>",
            height=0, width=0,
        )
        _debug_line(st, debug, "schedule_exact_reload_ms", delta_ms)
    except Exception:
        pass


def _run_general_scan_and_render(st) -> int | None:
    """Run 'Tüm dönemleri arama' and render results on settings.

    Returns number of rows if any (0 if empty), or None on error.
    """
    try:
        from tabs.revize_panel_genel import hazirla_tum_donemler_df
    except Exception as exc:
        st.error(f"Genel tarama modulu yuklenemedi: {exc}")
        return None

    try:
        conn = sqlite3.connect("ucus_egitim.db", check_same_thread=False)
    except Exception as exc:
        st.error(f"Veritabani baglantisi kurulamadi: {exc}")
        return None

    try:
        df = hazirla_tum_donemler_df(conn, bugun=_now_istanbul().date())
    except Exception as exc:
        st.error(f"Genel tarama calistirilamadi: {exc}")
        try:
            conn.close()
        except Exception:
            pass
        return None

    try:
        conn.close()
    except Exception:
        pass

    if df is None:
        st.warning("Veritabaninda donem bulunamadi.")
        return 0
    if getattr(df, "empty", False):
        st.success("Eksik gorevi olan ogrenci bulunmadi.")
        return 0

    st.markdown("### Genel Tarama Sonucu (Tüm Dönemler)")
    try:
        st.dataframe(df, use_container_width=True, hide_index=True)
    except Exception:
        st.dataframe(df)
    st.caption(f"Toplam {len(df)} satir")
    return int(len(df))


def _list_donemler(conn) -> list[str]:
    try:
        q = "SELECT DISTINCT donem FROM ucus_planlari"
        return pd.read_sql_query(q, conn)["donem"].dropna().astype(str).tolist()
    except Exception:
        return []


def _list_ogrenciler(conn, donem: str) -> list[str]:
    try:
        q = "SELECT DISTINCT ogrenci FROM ucus_planlari WHERE donem = ?"
        return pd.read_sql_query(q, conn, params=[donem])["ogrenci"].dropna().astype(str).tolist()
    except Exception:
        return []


def _auto_bireysel_execute(st, *, donem: str, ogrenci: str) -> Optional[int]:
    """Seçilen öğrenci için ilk eksik görevden itibaren zincirli revize uygula.

    Dönen değer: Güncellenen görev sayısı (bilinmiyorsa None).
    """
    try:
        from tabs.utils.ozet_utils import ozet_panel_verisi_hazirla
        from tabs.revize_panel_bireysel import yazdir_secili_kayitlar
    except Exception as exc:
        st.error(f"Bireysel revize modulleri yuklenemedi: {exc}")
        return None

    try:
        conn = sqlite3.connect("ucus_egitim.db", check_same_thread=False)
    except Exception as exc:
        st.error(f"Veritabani baglantisi kurulamadi: {exc}")
        return None

    try:
        df_ogrenci, *_ = ozet_panel_verisi_hazirla(ogrenci, conn)
        bugun_ts = pd.to_datetime(_now_istanbul().date())
        durum_text = df_ogrenci["durum"].fillna("").astype(str)
        mask = durum_text.str.contains("eksik", case=False) & (df_ogrenci["plan_tarihi"] < bugun_ts)
        df_eksik = df_ogrenci[mask]
        if df_eksik.empty:
            st.info(f"{ogrenci} icin eksik gorev bulunamadi; bireysel revize atlandi.")
            try:
                conn.close()
            except Exception:
                pass
            return 0
        ilk = df_eksik.sort_values("plan_tarihi").iloc[0]
        gosterilecekler = ["ogrenci", "plan_tarihi", "gorev_ismi", "sure", "gerceklesen_sure", "durum"]
        df_secili = pd.DataFrame([{**{"ogrenci": ogrenci}, **{k: ilk.get(k) for k in gosterilecekler if k in df_ogrenci.columns}}])

        # Çalıştır ve DB'ye uygula
        yazdir_secili_kayitlar(df_secili, conn)
        try:
            conn.close()
        except Exception:
            pass
        return None
    except Exception as exc:
        st.error(f"Bireysel revize calistirilamadi: {exc}")
        try:
            conn.close()
        except Exception:
            pass
        return None

# =====================
# Ana Sekme
# =====================
def tab_settings(st) -> None:
    """Ayarlar sayfası: günlük selamlama zamanlayıcısı."""
    config = _load_config()
    scheduled_time = _parse_time(config["scheduled_time"])

    st.subheader("Gunluk Hatirlatma")
    st.caption("Belirlediginiz saatte ayarlar ekraninda kisa bir mesaj gosterilir.")

    _render_live_clock(st)

    debug = st.checkbox("Debug loglarini goster", value=True)
    _debug_line(st, debug, "CONFIG_PATH", CONFIG_PATH.resolve())

    status_placeholder = st.empty()

    # Form
    with st.form("daily_greeting_form"):
        new_time = st.time_input(
            "Mesaj saati",
            value=scheduled_time,
            step=TIME_INPUT_STEP,
            help="Saat ve dakikayi secin. Uygulama bu saatte 'Merhaba' mesajini gosterir.",
        )
        submitted = st.form_submit_button("Kaydet")

    if submitted:
        config["scheduled_time"] = new_time.strftime("%H:%M")
        update_time = _now_istanbul()
        config["last_update_message"] = (
            f"Ayarlar {update_time.strftime('%d %B %Y %H:%M')} tarihinde guncellendi."
        )
        # Aynı gün içinde yeni saat için tekrar tetiklenebilsin
        config["last_display_date"] = None
        _save_config(config)
        _debug_line(st, debug, "saved_config", json.dumps(config, ensure_ascii=False))
        st.success(f"Ayarlar guncellendi. Mesaj her gun {config['scheduled_time']} saatinde gosterilecek.")
        scheduled_time = new_time

    # Kalıcı mesaj
    persistent_message = config.get("last_update_message")
    _debug_line(st, debug, "loaded_config", json.dumps(config, ensure_ascii=False))
    _debug_line(st, debug, "scheduled_time", scheduled_time.strftime("%H:%M"))
    if persistent_message and persistent_message.startswith(GREETING_PREFIX):
        status_placeholder.success(persistent_message)
        try:
            st.toast(persistent_message)  # görsel geri bildirim
        except Exception:
            pass
    elif persistent_message:
        status_placeholder.info(persistent_message)
    else:
        status_placeholder.info("Henuz bir guncelleme yapilmadi.")

    # --- Zamanlama hesapları ---
    now = _now_istanbul()
    scheduled_today = now.replace(
        hour=scheduled_time.hour, minute=scheduled_time.minute, second=0, microsecond=0
    )
    last_display_date = config.get("last_display_date")

    # Yakın pencere: sık yenile
    window_start = scheduled_today - timedelta(seconds=NEAR_WINDOW_BEFORE_SEC)
    window_end = scheduled_today + timedelta(seconds=NEAR_WINDOW_AFTER_SEC)
    if window_start <= now <= window_end:
        _ensure_autorefresh(st, seconds=NEAR_WINDOW_REFRESH_SEC)
        _debug_line(st, debug, "near_window_refresh", f"active {NEAR_WINDOW_REFRESH_SEC}s")
    else:
        # Genel (arka plan güvenliği)
        _ensure_autorefresh(st, seconds=GENERAL_REFRESH_SEC)
        _debug_line(st, debug, "general_refresh", f"active {GENERAL_REFRESH_SEC}s")

    # 1 sn tolerans
    grace_scheduled_today = scheduled_today - timedelta(seconds=GRACE_SECONDS)
    should_display = (
        now >= grace_scheduled_today and last_display_date != now.date().isoformat()
    )

    _debug_line(st, debug, "now", now.strftime("%Y-%m-%d %H:%M:%S"))
    _debug_line(st, debug, "scheduled_today", scheduled_today.strftime("%Y-%m-%d %H:%M:%S"))
    _debug_line(st, debug, "last_display_date", last_display_date)
    _debug_line(st, debug, "should_display", should_display)

    # Göster / Planla
    if should_display:
        message = f"{GREETING_PREFIX} Saat {scheduled_time.strftime('%H:%M')}"
        _debug_line(st, debug, "show_message", message)

        # Çok kanallı çıktı: placeholder + toast (+ write yedek)
        status_placeholder.success(message)
        try:
            st.toast(message)
        except Exception:
            pass
        try:
            st.write("")  # layout tetiklemesi
        except Exception:
            pass

        config["last_update_message"] = message
        config["last_display_date"] = now.date().isoformat()
        _save_config(config)
        _debug_line(st, debug, "last_display_date_set", config["last_display_date"])
        try:
            st.markdown("---")
            st.subheader("Genel Tarama (Tüm Dönemler)")
            cnt = _run_general_scan_and_render(st)
            if cnt is not None:
                _debug_line(st, debug, "general_scan_rowcount", cnt)
        except Exception as exc:
            st.error(f"Genel tarama goruntulenemedi: {exc}")
    else:
        next_display = scheduled_today
        if now >= scheduled_today:
            next_display += timedelta(days=1)

        if now < scheduled_today and (last_display_date != now.date().isoformat()):
            _schedule_exact_reload(st, now, scheduled_today, debug=debug)

        st.info(
            "Bir sonraki mesaj "
            + next_display.strftime("%d %B %Y %H:%M")
            + " tarihinde gosterilecek."
        )

    # Varsayılanlara dön
    if st.button("Varsayilan zamana don"):
        config.update(DEFAULT_CONFIG)
        config["last_update_message"] = "Ayarlar varsayilan zamana donduruldu."
        _save_config(config)
        st.rerun()

