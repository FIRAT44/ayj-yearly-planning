# tabs/tab_naeron_goruntule.py
import pandas as pd
import sqlite3
import streamlit as st

def tab_naeron_kayitlari(st):
    st.subheader("üóÇ Naeron Veritabanƒ±nƒ± G√∂r√ºnt√ºle, Filtrele, D√ºzelt, Sil")

    try:
        conn = sqlite3.connect("naeron_kayitlari.db")
        df = pd.read_sql_query("SELECT rowid, * FROM naeron_ucuslar", conn)

        if df.empty:
            st.warning("Veritabanƒ±nda kayƒ±t bulunamadƒ±.")
            return

        # Filtre paneli
        with st.expander("üîç Filtrele"):
            col1, col2 = st.columns(2)
            with col1:
                ogretmen = st.multiselect(
                    "√ñƒüretmen Pilot",
                    options=sorted(df["√ñƒüretmen Pilot"].dropna().unique().tolist())
                )
                ogrenci = st.multiselect(
                    "√ñƒürenci Pilot",
                    options=sorted(df["√ñƒürenci Pilot"].dropna().unique().tolist())
                )
                # ‚¨áÔ∏è YENƒ∞: √áaƒürƒ± filtresi
                cagri = st.multiselect(
                    "√áaƒürƒ±",
                    options=sorted(df["√áaƒürƒ±"].dropna().unique().tolist())
                )
            with col2:
                gorev = st.multiselect(
                    "G√∂rev",
                    options=sorted(df["G√∂rev"].dropna().unique().tolist())
                )
                tarih_araligi = st.date_input("U√ßu≈ü Tarihi Aralƒ±ƒüƒ±", [])

        df_filtered = df.copy()
        if ogretmen:
            df_filtered = df_filtered[df_filtered["√ñƒüretmen Pilot"].isin(ogretmen)]
        if ogrenci:
            df_filtered = df_filtered[df_filtered["√ñƒürenci Pilot"].isin(ogrenci)]
        if cagri:  # ‚¨ÖÔ∏è YENƒ∞: √áaƒürƒ± uygulanƒ±yor
            df_filtered = df_filtered[df_filtered["√áaƒürƒ±"].isin(cagri)]
        if gorev:
            df_filtered = df_filtered[df_filtered["G√∂rev"].isin(gorev)]
        if len(tarih_araligi) == 2:
            df_filtered = df_filtered[
                (pd.to_datetime(df_filtered["U√ßu≈ü Tarihi 2"]) >= pd.to_datetime(tarih_araligi[0])) &
                (pd.to_datetime(df_filtered["U√ßu≈ü Tarihi 2"]) <= pd.to_datetime(tarih_araligi[1]))
            ]

      
        # ===========================
        # üî¨ ƒ∞LERƒ∞ ANALƒ∞ZLER (Tescile G√∂re)
        # ===========================
        import numpy as np
        import altair as alt
        import io

        with st.expander("üî¨ ƒ∞leri Analizler (Tescile G√∂re)", expanded=False):
            # --- Tescil kolonu tespiti (yoksa √ßƒ±k) ---
            olasi_tescil_kolonlari = [
                "U√ßak Tescili", "U√ßak", "Tescil", "Aircraft", "Aircraft Reg",
                "ACREG", "AC_REG", "Registration", "Reg", "√áaƒürƒ±"
            ]
            mevcut_tescil_kolonlari = [c for c in olasi_tescil_kolonlari if c in df_filtered.columns]
            if not mevcut_tescil_kolonlari:
                st.info("Tescil kolonu bulunamadƒ±. ƒ∞leri analizler i√ßin 'U√ßak Tescili' veya '√áaƒürƒ±' gibi bir kolon gerekli.")
            else:
                reg_col = st.selectbox("Tescil kolonu (ileri analizler)", mevcut_tescil_kolonlari, index=0)

                dfx = df_filtered.copy()

                # --- Tarih & saatleri hazƒ±rla ---
                if "U√ßu≈ü Tarihi 2" in dfx.columns:
                    dfx["U√ßu≈ü Tarihi 2"] = pd.to_datetime(dfx["U√ßu≈ü Tarihi 2"], errors="coerce")

                def _hhmm_to_min(x):
                    try:
                        s = str(x).strip()
                        if ":" in s:
                            h, m = s.split(":", 1)
                            return int(h)*60 + int(m)
                        return int(float(s)*60)
                    except:
                        return 0

                for c in ["Block Time", "Flight Time", "IFR S√ºresi"]:
                    if c not in dfx.columns:
                        dfx[c] = 0
                dfx["Block Time_min"]  = dfx["Block Time"].apply(_hhmm_to_min)
                dfx["Flight Time_min"] = dfx["Flight Time"].apply(_hhmm_to_min)
                dfx["IFR S√ºresi_min"]  = dfx["IFR S√ºresi"].apply(_hhmm_to_min)

                # --- Se√ßenek: tescil filtrele (sadece ileri analiz i√ßin) ---
                t_ops = sorted(dfx[reg_col].dropna().astype(str).unique().tolist())
                t_sel = st.multiselect("Analize dahil edilecek tesciller", t_ops, default=[])
                if t_sel:
                    dfx = dfx[dfx[reg_col].astype(str).isin(t_sel)]

                # ========== 1) Kullanƒ±m √ñzeti & Denge (Gini) ==========
                ozet = (
                    dfx.groupby(reg_col, dropna=True)
                       .agg(ucus_sayisi=("Flight Time_min", "count"),
                            flight_saat=("Flight Time_min", lambda s: s.sum()/60),
                            block_saat=("Block Time_min",  lambda s: s.sum()/60),
                            ifr_saat=("IFR S√ºresi_min",    lambda s: s.sum()/60))
                       .reset_index()
                       .sort_values("flight_saat", ascending=False)
                )

                def gini(arr):
                    x = np.array(arr, dtype=float)
                    if x.size == 0: return 0.0
                    if np.amin(x) < 0:
                        x = x - np.min(x)
                    s = x.sum()
                    if s == 0: return 0.0
                    x = np.sort(x)
                    n = x.size
                    return (np.sum((2*np.arange(1, n+1) - n - 1) * x)) / (n * s)

                g = gini(ozet["flight_saat"].values) if not ozet.empty else 0.0
                st.metric("Kullanƒ±m Denge Skoru", f"{1 - g:.2f}", help="1'e yakƒ±n olmasƒ± filonun dengeli kullanƒ±ldƒ±ƒüƒ±nƒ± g√∂sterir.")

                st.markdown("#### üèÅ En √áok U√ßan Tesciller (Flight saat)")
                st.altair_chart(
                    alt.Chart(ozet.head(15)).mark_bar().encode(
                        x=alt.X("flight_saat:Q", title="Saat"),
                        y=alt.Y(f"{reg_col}:N", sort='-x', title="Tescil"),
                        tooltip=[reg_col, "ucus_sayisi", "flight_saat", "block_saat", "ifr_saat"]
                    ),
                    use_container_width=True
                )

                # ========== 2) 30-G√ºnl√ºk Rolling Kullanƒ±m Trend ==========
                if "U√ßu≈ü Tarihi 2" in dfx.columns:
                    dfx["gun"] = dfx["U√ßu≈ü Tarihi 2"].dt.floor("D")
                    gunluk = dfx.groupby([reg_col, "gun"])["Flight Time_min"].sum().reset_index()
                    gunluk["saat"] = gunluk["Flight Time_min"] / 60
                    gunluk["rolling30"] = gunluk.groupby(reg_col)["saat"].transform(lambda s: s.rolling(30, min_periods=1).sum())

                    # Grafiƒüi okunur yapmak i√ßin en √ßok u√ßan ilk 5 tescili varsayƒ±lan se√ß
                    cizilecekler = t_sel if t_sel else ozet[reg_col].head(5).tolist()
                    gsel = gunluk[gunluk[reg_col].isin(cizilecekler)]

                    st.markdown("#### üìà 30 G√ºnl√ºk Toplam Flight Saat (Rolling)")
                    st.altair_chart(
                        alt.Chart(gsel).mark_line(point=True).encode(
                            x=alt.X("gun:T", title="G√ºn"),
                            y=alt.Y("rolling30:Q", title="Saat (Son 30 g√ºn toplam)"),
                            color=alt.Color(f"{reg_col}:N", title="Tescil"),
                            tooltip=[reg_col, "gun", alt.Tooltip("rolling30:Q", format=".1f")]
                        ),
                        use_container_width=True
                    )

                # ========== 3) Verimlilik: Taxi Oranƒ± (Block - Flight) / Block ==========
                dfx["Taxi_min"] = (dfx["Block Time_min"] - dfx["Flight Time_min"]).clip(lower=0)
                verim = (
                    dfx.groupby(reg_col, dropna=True)
                       .agg(taxi_orani=("Taxi_min", lambda s: (s.sum() / max(1, dfx.loc[s.index, "Block Time_min"].sum()))))
                       .reset_index()
                       .sort_values("taxi_orani", ascending=False)
                )

                st.markdown("#### ‚õΩ Taxi Oranƒ± (y√ºksekse pist/ruhsat/park verimliliƒüi d√º≈ü√ºk olabilir)")
                st.altair_chart(
                    alt.Chart(verim.head(15)).mark_bar().encode(
                        x=alt.X("taxi_orani:Q", title="Taxi / Block Oranƒ±", axis=alt.Axis(format="%")),
                        y=alt.Y(f"{reg_col}:N", sort='-x', title="Tescil"),
                        tooltip=[reg_col, alt.Tooltip("taxi_orani:Q", format=".0%")]
                    ),
                    use_container_width=True
                )

                # ========== 4) Turnaround: Aynƒ± Tescilde Ardƒ±≈üƒ±k U√ßu≈ülar Arasƒ± Zaman ==========
                def _combine_dt(date_ser, timestr_ser):
                    d = pd.to_datetime(date_ser, errors="coerce")
                    t = pd.to_timedelta(timestr_ser.astype(str).str.slice(0,5) + ":00", errors="coerce")
                    return d.dt.normalize() + t

                turn = pd.DataFrame()
                if {"U√ßu≈ü Tarihi 2", "Off Bl.", "On Bl."}.issubset(dfx.columns):
                    tmp = dfx.dropna(subset=["U√ßu≈ü Tarihi 2", "Off Bl.", "On Bl."]).copy()
                    tmp["off_dt"] = _combine_dt(tmp["U√ßu≈ü Tarihi 2"], tmp["Off Bl."])
                    tmp["on_dt"]  = _combine_dt(tmp["U√ßu≈ü Tarihi 2"], tmp["On Bl."])
                    # Gece yarƒ±sƒ± a≈üƒ±mƒ±: on_dt < off_dt ise on_dt'ye +1 g√ºn
                    mask = tmp["on_dt"] < tmp["off_dt"]
                    tmp.loc[mask, "on_dt"] = tmp.loc[mask, "on_dt"] + pd.Timedelta(days=1)

                    tmp = tmp.sort_values([reg_col, "off_dt"])
                    tmp["next_off"] = tmp.groupby(reg_col)["off_dt"].shift(-1)
                    tmp["turn_min"] = (tmp["next_off"] - tmp["on_dt"]).dt.total_seconds() / 60.0
                    # Mantƒ±ksƒ±zlarƒ± ele (negatif veya > 12 saat)
                    tmp = tmp[(tmp["turn_min"] >= 0) & (tmp["turn_min"] <= 12*60)]

                    turn = (
                        tmp.groupby(reg_col, dropna=True)["turn_min"]
                           .agg(["count", "median", "mean"]).reset_index()
                           .rename(columns={"count":"adet","median":"medyan_dk","mean":"ortalama_dk"})
                           .sort_values("medyan_dk", ascending=True)
                    )

                    st.markdown("#### üîÅ Turnaround (medyan, dakika)")
                    st.altair_chart(
                        alt.Chart(turn.head(15)).mark_bar().encode(
                            x=alt.X("medyan_dk:Q", title="Medyan (dk)"),
                            y=alt.Y(f"{reg_col}:N", sort='x'),
                            tooltip=[reg_col, alt.Tooltip("medyan_dk:Q", format=".0f"), alt.Tooltip("ortalama_dk:Q", format=".0f"), "adet"]
                        ),
                        use_container_width=True
                    )
                else:
                    st.info("Turnaround i√ßin 'Off Bl.' ve 'On Bl.' alanlarƒ± gerekiyor.")

                # ========== 5) Rota Isƒ± Haritasƒ± (Kalkƒ±≈ü ‚Üí ƒ∞ni≈ü) ==========
                if {"Kalkƒ±≈ü", "ƒ∞ni≈ü"}.issubset(dfx.columns):
                    r = (
                        dfx.assign(Rota=dfx["Kalkƒ±≈ü"].astype(str).str.strip() + " ‚Üí " + dfx["ƒ∞ni≈ü"].astype(str).str.strip())
                           .groupby(["Kalkƒ±≈ü", "ƒ∞ni≈ü"]).size().reset_index(name="adet")
                           .sort_values("adet", ascending=False).head(100)
                    )
                    st.markdown("#### üó∫Ô∏è Rota Isƒ± Haritasƒ± (en √ßok 100)")
                    st.altair_chart(
                        alt.Chart(r).mark_rect().encode(
                            x=alt.X("Kalkƒ±≈ü:N", sort='-y'),
                            y=alt.Y("ƒ∞ni≈ü:N", sort='-x'),
                            color=alt.Color("adet:Q", title="Adet"),
                            tooltip=["Kalkƒ±≈ü","ƒ∞ni≈ü","adet"]
                        ),
                        use_container_width=True
                    )

                # ========== 6) Eƒüitmen Daƒüƒ±lƒ±mƒ± (Flight saat) ==========
                if {"√ñƒüretmen Pilot"}.issubset(dfx.columns):
                    eg = (
                        dfx.groupby([reg_col, "√ñƒüretmen Pilot"])["Flight Time_min"].sum().reset_index()
                           .assign(Saat=lambda d: d["Flight Time_min"]/60)
                    )
                    top_t = ozet[reg_col].head(5).tolist()
                    tail_for_stack = st.multiselect("Yƒ±ƒüƒ±lmƒ±≈ü grafik i√ßin tescil se√ß (varsayƒ±lan ilk 5)", t_ops, default=top_t)
                    egsel = eg[eg[reg_col].isin(tail_for_stack)]
                    st.markdown("#### üë®‚Äç‚úàÔ∏è Eƒüitmen Daƒüƒ±lƒ±mƒ± (yƒ±ƒüƒ±lmƒ±≈ü bar, saat)")
                    st.altair_chart(
                        alt.Chart(egsel).mark_bar().encode(
                            x=alt.X("Saat:Q", title="Saat"),
                            y=alt.Y(f"{reg_col}:N", title="Tescil", sort='-x'),
                            color=alt.Color("√ñƒüretmen Pilot:N", title="√ñƒüretmen"),
                            tooltip=[reg_col, "√ñƒüretmen Pilot", alt.Tooltip("Saat:Q", format=".1f")]
                        ),
                        use_container_width=True
                    )

                # ========== 7) √áok Sayfalƒ± Excel √áƒ±ktƒ±sƒ± ==========
                try:
                    import xlsxwriter
                    buf_adv = io.BytesIO()
                    with pd.ExcelWriter(buf_adv, engine="xlsxwriter") as writer:
                        ozet.to_excel(writer, sheet_name="01_Ozet", index=False)
                        if not gunluk.empty:
                            gunluk[gunluk[reg_col].isin(cizilecekler)][[reg_col, "gun", "saat", "rolling30"]].to_excel(writer, sheet_name="02_Rolling30", index=False)
                        verim.to_excel(writer, sheet_name="03_TaxiOrani", index=False)
                        if not turn.empty:
                            turn.to_excel(writer, sheet_name="04_Turnaround", index=False)
                        if {"Kalkƒ±≈ü","ƒ∞ni≈ü"}.issubset(dfx.columns):
                            r.to_excel(writer, sheet_name="05_Rotalar", index=False)
                        if {"√ñƒüretmen Pilot"}.issubset(dfx.columns):
                            eg.to_excel(writer, sheet_name="06_Egitmen", index=False)

                        # Basit ba≈ülƒ±k bi√ßimlendirmesi
                        for sh in writer.sheets.values():
                            ws = sh
                            wb = writer.book
                            header_fmt = wb.add_format({"bold": True, "bg_color": "#E2EFDA", "border": 1})
                            # ba≈ülƒ±k satƒ±rƒ±
                            for col, name in enumerate(pd.read_excel(buf_adv.getvalue(), engine="openpyxl").columns if False else []):
                                pass  # (hƒ±zlƒ± ge√ß ‚Äì zaten xlsxwriter ile yazdƒ±k)
                    st.download_button(
                        "üì• ƒ∞leri Analiz (Excel, √ßok sayfa)",
                        data=buf_adv.getvalue(),
                        file_name="ileri_analiz_tescil.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                except Exception:
                    st.info("Excel √ßoklu sayfa √ºretilemedi (xlsxwriter yoksa).")






        with st.expander("üß≠ Kapsam Analizi & Operasyonel Uyarƒ±lar", expanded=False):
            tab_kapsam, tab_bosta, tab_isihar, tab_bakim = st.tabs(
                ["üìö G√∂rev Kapsamƒ±", "üïí Bo≈üta Kalan Tesciller", "üóìÔ∏è G√ºn/Saat Isƒ± Haritasƒ±", "üõ†Ô∏è Bakƒ±m E≈üik Uyarƒ±larƒ±"]
            )

            # --- Tescil kolonu tespiti (esnek) ---
            olasi_tescil_kolonlari = [
                "U√ßak Tescili", "U√ßak", "Tescil", "Aircraft", "Aircraft Reg",
                "ACREG", "AC_REG", "Registration", "Reg", "√áaƒürƒ±"
            ]
            mevcut_tescil_kolonlari = [c for c in olasi_tescil_kolonlari if c in df_filtered.columns]
            if not mevcut_tescil_kolonlari:
                st.info("Tescil kolonu bulunamadƒ±. 'U√ßak Tescili' veya '√áaƒürƒ±' gibi bir kolon gerekli.")
            else:
                reg_col = st.selectbox("Tescil kolonu (bu panel i√ßin)", options=mevcut_tescil_kolonlari, index=0)
                dfz = df_filtered.copy()

                # --- Tarih & s√ºre hazƒ±rlƒ±ƒüƒ± ---
                if "U√ßu≈ü Tarihi 2" in dfz.columns:
                    dfz["U√ßu≈ü Tarihi 2"] = pd.to_datetime(dfz["U√ßu≈ü Tarihi 2"], errors="coerce")

                def _hhmm_to_min(x):
                    try:
                        s = str(x).strip()
                        if ":" in s:
                            h, m = s.split(":", 1)
                            return int(h)*60 + int(m)
                        return int(float(s)*60)
                    except:
                        return 0

                for c in ["Block Time", "Flight Time", "IFR S√ºresi"]:
                    if c not in dfz.columns:
                        dfz[c] = 0
                dfz["Block Time_min"]  = dfz["Block Time"].apply(_hhmm_to_min)
                dfz["Flight Time_min"] = dfz["Flight Time"].apply(_hhmm_to_min)
                dfz["IFR S√ºresi_min"]  = dfz["IFR S√ºresi"].apply(_hhmm_to_min)

                # ============= 1) üìö G√ñREV KAPSAM ANALƒ∞Zƒ∞ =============
                with tab_kapsam:
                    st.caption("G√∂rev isimlerini kategorilere ayƒ±rƒ±p (PIC/DUAL/SIM/ME/SE/MCC) tescil bazlƒ± kapsamƒ± g√∂sterir.")

                    # G√∂rev ‚Üí kategori(ler) e≈üleme (heuristic, geni≈ületilebilir)
                    def _cats(g):
                        s = str(g).upper().replace("ƒ∞","I")  # TR b√ºy√ºk-i d√ºzeltmesi
                        cats = set()
                        if "MCC" in s: cats.add("MCC")
                        if "SIM" in s: cats.add("SIM")
                        if " PIC" in s or s.startswith("PIC") or "SXC-" in s: cats.add("PIC")
                        if "DUAL" in s or s.startswith("E-") or "E-" in s: cats.add("DUAL")
                        if " ME" in s or "(ME" in s or "MEP" in s or "CPL ST(ME)" in s: cats.add("ME")
                        if " SE" in s or "(SE" in s: cats.add("SE")
                        # bazƒ± yaygƒ±n kƒ±saltmalar
                        if "CR ST" in s or "SKILL TEST" in s: cats.add("ME" if "(ME" in s or "ME" in s else "SE")
                        return list(cats) if cats else ["Dƒ∞ƒûER"]

                    if "G√∂rev" not in dfz.columns:
                        st.info("Bu analiz i√ßin 'G√∂rev' kolonu gerekiyor.")
                    else:
                        dfa = dfz[[reg_col, "G√∂rev", "Flight Time_min"]].copy()
                        dfa["Kategori"] = dfa["G√∂rev"].apply(_cats)
                        dfa = dfa.explode("Kategori")

                        # √ñzet: tescil √ó kategori
                        pivot = (
                            dfa.groupby([reg_col,"Kategori"])
                               .agg(ucus_sayisi=("G√∂rev","count"),
                                    saat=("Flight Time_min", lambda s: s.sum()/60))
                               .reset_index()
                        )

                        # Yƒ±ƒüƒ±lmƒ±≈ü bar (saat)
                        st.markdown("#### ‚åõ Kategori Kapsamƒ± (Saat, Yƒ±ƒüƒ±lmƒ±≈ü)")
                        top_tail = (
                            pivot.groupby(reg_col)["saat"].sum().reset_index()
                                 .sort_values("saat", ascending=False)[reg_col].head(10).tolist()
                        )
                        sec_tails = st.multiselect("Tescil se√ß (varsayƒ±lan ilk 10 saat)", sorted(pivot[reg_col].unique().tolist()), default=top_tail)
                        pv_sel = pivot[pivot[reg_col].isin(sec_tails)]

                        ch = alt.Chart(pv_sel).mark_bar().encode(
                            x=alt.X("saat:Q", title="Saat"),
                            y=alt.Y(f"{reg_col}:N", sort='-x', title="Tescil"),
                            color=alt.Color("Kategori:N", sort=None),
                            tooltip=[reg_col, "Kategori", alt.Tooltip("saat:Q", format=".1f"), "ucus_sayisi"]
                        )
                        st.altair_chart(ch, use_container_width=True)

                        # Kapsam y√ºzdeleri (satƒ±r toplamƒ±na g√∂re)
                        kapsam = (
                            pv_sel.pivot_table(index=reg_col, columns="Kategori", values="saat", aggfunc="sum", fill_value=0)
                                  .apply(lambda r: 100*r/r.sum() if r.sum()>0 else r, axis=1)
                                  .reset_index()
                        )
                        st.markdown("#### % Kapsam (Saat Oranƒ±)")
                        st.dataframe(kapsam, use_container_width=True)
                        st.download_button("üì• Kapsam (CSV)", kapsam.to_csv(index=False).encode("utf-8"),
                                           file_name="kapsam_oranlari.csv", mime="text/csv")

                # ============= 2) üïí BO≈ûTA KALAN TESCƒ∞LLER =============
                with tab_bosta:
                    if "U√ßu≈ü Tarihi 2" not in dfz.columns:
                        st.info("Bo≈üta analizi i√ßin 'U√ßu≈ü Tarihi 2' gerekiyor.")
                    else:
                        x_gun = st.number_input("Son X g√ºn u√ßmamƒ±≈ü olanlarƒ± listele", min_value=1, max_value=365, value=14, step=1)
                        ref_tarih = pd.to_datetime(st.date_input("Referans tarih", pd.Timestamp.today().date()))
                        son_ucus = dfz.groupby(reg_col)["U√ßu≈ü Tarihi 2"].max().reset_index().rename(columns={"U√ßu≈ü Tarihi 2":"son_ucus"})
                        son_ucus["gun_gecikme"] = (ref_tarih - son_ucus["son_ucus"]).dt.days
                        bosta = son_ucus[(son_ucus["gun_gecikme"] >= x_gun) | son_ucus["son_ucus"].isna()].sort_values("gun_gecikme", ascending=False)

                        st.markdown("#### üí§ Bo≈üta Kalanlar")
                        st.dataframe(bosta, use_container_width=True)
                        st.download_button("üì• Bo≈üta Liste (CSV)", bosta.to_csv(index=False).encode("utf-8"),
                                           file_name="bosta_kalan_tesciller.csv", mime="text/csv")

                # ============= 3) üóìÔ∏è G√úN/SAAT ISI HARƒ∞TASI =============
                with tab_isihar:
                    if {"U√ßu≈ü Tarihi 2","Off Bl.","Flight Time_min"}.issubset(dfz.columns):
                        tmp = dfz.dropna(subset=["U√ßu≈ü Tarihi 2","Off Bl."]).copy()
                        # G√ºn adƒ± (TR)
                        gun_map = {0:"Pzt",1:"Sal",2:"√áar",3:"Per",4:"Cum",5:"Cts",6:"Paz"}
                        tmp["Gun"] = tmp["U√ßu≈ü Tarihi 2"].dt.dayofweek.map(gun_map)

                        # Saat (Off Bl.)
                        def _hour_from_off(s):
                            s = str(s).strip()
                            if len(s) >= 2 and s[:2].isdigit():
                                return int(s[:2])
                            return None
                        tmp["Saat"] = tmp["Off Bl."].apply(_hour_from_off)

                        metrik = st.selectbox("Metrik", ["U√ßu≈ü Adedi", "Flight Saat (toplam)"], index=0)
                        if metrik == "U√ßu≈ü Adedi":
                            heat = tmp.groupby(["Gun","Saat"]).size().reset_index(name="deger")
                        else:
                            heat = tmp.groupby(["Gun","Saat"])["Flight Time_min"].sum().reset_index()
                            heat["deger"] = heat["Flight Time_min"]/60

                        st.markdown("#### üî• Yoƒüunluk Isƒ± Haritasƒ±")
                        chh = alt.Chart(heat.dropna()).mark_rect().encode(
                            x=alt.X("Saat:O", sort=list(range(0,24)), title="Saat (Off Bl.)"),
                            y=alt.Y("Gun:N", sort=["Pzt","Sal","√áar","Per","Cum","Cts","Paz"], title="G√ºn"),
                            color=alt.Color("deger:Q", title="Deƒüer"),
                            tooltip=["Gun","Saat", alt.Tooltip("deger:Q", format=".1f")]
                        )
                        st.altair_chart(chh, use_container_width=True)
                    else:
                        st.info("Isƒ± haritasƒ± i√ßin 'U√ßu≈ü Tarihi 2', 'Off Bl.' ve 'Flight Time' alanlarƒ± gerekli.")

                # ============= 4) üõ†Ô∏è BAKIM E≈ûƒ∞K UYARILARI =============
                with tab_bakim:
                    st.caption("Se√ßilen pencere (son N g√ºn) i√ßindeki toplam u√ßu≈ü saatini bakƒ±m e≈üiƒüiyle kar≈üƒ±la≈ütƒ±rƒ±r.")
                    if "U√ßu≈ü Tarihi 2" not in dfz.columns:
                        st.info("Bakƒ±m kontrol√º i√ßin 'U√ßu≈ü Tarihi 2' gerekiyor.")
                    else:
                        pencere_gun = st.number_input("Pencere (son N g√ºn)", min_value=7, max_value=365, value=90, step=1)
                        esik_saat   = st.number_input("Bakƒ±m e≈üiƒüi (saat)", min_value=10.0, max_value=500.0, value=100.0, step=10.0)
                        uyar_marji  = st.slider("Uyarƒ± e≈üiƒüi (%)", min_value=50, max_value=100, value=80, step=5,
                                                help="√ñrn. %80 ‚Üí e≈üiƒüin %80'i a≈üƒ±ldƒ±ƒüƒ±nda 'Yakla≈üƒ±yor' uyarƒ±sƒ±.")
                        bitis = pd.to_datetime(st.date_input("Biti≈ü tarihi", pd.Timestamp.today().date()))
                        baslangic = bitis - pd.Timedelta(days=int(pencere_gun))

                        win = dfz[(dfz["U√ßu≈ü Tarihi 2"] >= baslangic) & (dfz["U√ßu≈ü Tarihi 2"] <= bitis)].copy()
                        ozet = (
                            win.groupby(reg_col)["Flight Time_min"].sum().reset_index()
                               .assign(saat=lambda d: d["Flight Time_min"]/60)
                        )
                        ozet["yuzde"] = 100*ozet["saat"]/esik_saat
                        def _durum(p):
                            if p >= 100: return "‚õî E≈üik A≈üƒ±ldƒ±"
                            if p >= uyar_marji: return "‚ö†Ô∏è Yakla≈üƒ±yor"
                            return "‚úÖ G√ºvende"
                        ozet["durum"] = ozet["yuzde"].apply(_durum)
                        ozet = ozet.sort_values("yuzde", ascending=False)

                        st.markdown("#### üîß Bakƒ±m Yakla≈üƒ±mƒ± (Son N g√ºn)")
                        st.dataframe(ozet[[reg_col,"saat","yuzde","durum"]], use_container_width=True)
                        st.download_button("üì• Bakƒ±m √ñzeti (CSV)", ozet.to_csv(index=False).encode("utf-8"),
                                           file_name="bakim_esik_uyarilari.csv", mime="text/csv")

                        st.markdown("#### üìä E≈üiƒüe Yakla≈üƒ±m Grafiƒüi")
                        chb = alt.Chart(ozet).mark_bar().encode(
                            x=alt.X("saat:Q", title="Saat (pencere)"),
                            y=alt.Y(f"{reg_col}:N", sort='-x', title="Tescil"),
                            color=alt.Color("durum:N", sort=["‚õî E≈üik A≈üƒ±ldƒ±","‚ö†Ô∏è Yakla≈üƒ±yor","‚úÖ G√ºvende"]),
                            tooltip=[reg_col, alt.Tooltip("saat:Q", format=".1f"), alt.Tooltip("yuzde:Q", format=".0f"), "durum"]
                        )
                        st.altair_chart(chb, use_container_width=True)

                        # ƒ∞steƒüe baƒülƒ±: √áok sayfalƒ± Excel
                        try:
                            import xlsxwriter
                            buf = io.BytesIO()
                            with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
                                ozet.to_excel(writer, sheet_name="Bakim_Ozet", index=False)
                            st.download_button("üì• Bakƒ±m √ñzeti (Excel)", data=buf.getvalue(),
                                               file_name="bakim_ozeti.xlsx",
                                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                        except Exception:
                            st.info("Excel √ºretilemedi (xlsxwriter yoksa).")











        # ===========================
        # üìå Se√ßili U√ßak + G√∂rev (Alt Listeye Ekle)
        # ===========================
        import io

        with st.expander("üìå Se√ßili U√ßak + G√∂rev (Alt Liste)", expanded=False):
            # Tescil kolonu tespiti
            olasi_tescil_kolonlari = [
                "U√ßak Tescili", "U√ßak", "Tescil", "Aircraft", "Aircraft Reg",
                "ACREG", "AC_REG", "Registration", "Reg", "√áaƒürƒ±"
            ]
            mevcut = [c for c in olasi_tescil_kolonlari if c in df_filtered.columns]
            if not mevcut or "G√∂rev" not in df_filtered.columns:
                st.info("Bu b√∂l√ºm i√ßin tescil kolonu (√∂rn. 'U√ßak Tescili' / '√áaƒürƒ±') ve 'G√∂rev' kolonu gerekli.")
            else:
                reg_col = st.selectbox("Tescil kolonu", options=mevcut, index=0, key="alt_regcol")

                tescil_ops = sorted(df_filtered[reg_col].dropna().astype(str).unique().tolist())
                gorev_ops  = sorted(df_filtered["G√∂rev"].dropna().astype(str).unique().tolist())

                c1, c2 = st.columns(2)
                with c1:
                    sel_tail = st.selectbox("U√ßak / Tescil", options=tescil_ops, key="alt_sel_tail")
                with c2:
                    sel_gorev = st.selectbox("G√∂rev", options=gorev_ops, key="alt_sel_gorev")

                # Filtre
                dft = df_filtered[
                    (df_filtered[reg_col].astype(str) == str(sel_tail)) &
                    (df_filtered["G√∂rev"].astype(str) == str(sel_gorev))
                ].copy()

                # Zamanlarƒ± dakikaya √ßevir (gerektiƒüinde)
                def _hhmm_to_min(x):
                    try:
                        s = str(x).strip()
                        if ":" in s:
                            h, m = s.split(":", 1)
                            return int(h)*60 + int(m)
                        return int(float(s)*60)
                    except:
                        return 0

                for c in ["Block Time", "Flight Time", "IFR S√ºresi"]:
                    if c not in dft.columns:
                        dft[c] = 0
                dft["Block Time_min"]  = dft["Block Time"].apply(_hhmm_to_min)
                dft["Flight Time_min"] = dft["Flight Time"].apply(_hhmm_to_min)
                dft["IFR S√ºresi_min"]  = dft["IFR S√ºresi"].apply(_hhmm_to_min)

                if "U√ßu≈ü Tarihi 2" in dft.columns:
                    dft["U√ßu≈ü Tarihi 2"] = pd.to_datetime(dft["U√ßu≈ü Tarihi 2"], errors="coerce")

                # KPI
                ucus_say = len(dft)
                flight_saat = dft["Flight Time_min"].sum()/60
                block_saat  = dft["Block Time_min"].sum()/60
                son_tarih   = dft["U√ßu≈ü Tarihi 2"].max() if "U√ßu≈ü Tarihi 2" in dft.columns else None

                k1,k2,k3,k4 = st.columns(4)
                k1.metric("U√ßu≈ü Adedi", f"{ucus_say}")
                k2.metric("Flight (saat)", f"{flight_saat:.1f}")
                k3.metric("Block (saat)", f"{block_saat:.1f}")
                k4.metric("Son U√ßu≈ü", "" if son_tarih is None or pd.isna(son_tarih) else son_tarih.strftime("%Y-%m-%d"))

                st.markdown("#### üìÑ Kayƒ±tlar")
                # G√∂r√ºn√ºr tablo (rowid hari√ß)
                goster_cols = [c for c in dft.columns if c != "rowid"]
                st.dataframe(dft[goster_cols], use_container_width=True)

                # CSV indir
                st.download_button(
                    "üì• Bu Se√ßimi ƒ∞ndir (CSV)",
                    dft[goster_cols].to_csv(index=False).encode("utf-8"),
                    file_name=f"{sel_tail}_{sel_gorev}_kayitlar.csv",
                    mime="text/csv"
                )

                # ---- Alt liste (sepet) mantƒ±ƒüƒ± ----
                if "alt_sepet" not in st.session_state:
                    st.session_state["alt_sepet"] = []

                not_txt = st.text_input("(ƒ∞steƒüe baƒülƒ±) Not / Etiket", key="alt_not")

                c3, c4 = st.columns([1,1])
                with c3:
                    if st.button("‚ûï Bu se√ßimi ALT Lƒ∞STEYE EKLE"):
                        st.session_state["alt_sepet"].append({
                            "Tescil": sel_tail,
                            "G√∂rev": sel_gorev,
                            "U√ßu≈ü Adedi": ucus_say,
                            "Toplam Flight (saat)": round(flight_saat, 2),
                            "Toplam Block (saat)": round(block_saat, 2),
                            "Son U√ßu≈ü": "" if son_tarih is None or pd.isna(son_tarih) else son_tarih.strftime("%Y-%m-%d"),
                            "Not": not_txt.strip()
                        })
                        st.success("Se√ßim alt listeye eklendi.")

                with c4:
                    if st.button("üßπ Alt listeyi temizle"):
                        st.session_state["alt_sepet"] = []
                        st.info("Alt liste temizlendi.")

                # Alt listeyi g√∂ster & indir
                if st.session_state["alt_sepet"]:
                    st.markdown("#### üìé Alt Liste (Toplanan Se√ßimler)")
                    sepet_df = pd.DataFrame(st.session_state["alt_sepet"])
                    st.dataframe(sepet_df, use_container_width=True)

                    st.download_button(
                        "üì• Alt Listeyi ƒ∞ndir (CSV)",
                        sepet_df.to_csv(index=False).encode("utf-8"),
                        file_name="alt_liste_tescil_gorev.csv",
                        mime="text/csv"
                    )



        conn.close()

    except Exception as e:
        st.error(f"‚ùå Hata olu≈ütu: {e}")
