import pandas as pd
import streamlit as st
from datetime import datetime
import matplotlib.pyplot as plt
import io
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as XLImage
import tempfile
import os

def tab_tarihsel_analiz(st, conn):
    st.subheader("ðŸ“ˆ Tarihsel UÃ§uÅŸ SÃ¼re Analizi")

    df = pd.read_sql_query("SELECT plan_tarihi, sure, gorev_tipi FROM ucus_planlari", conn, parse_dates=["plan_tarihi"])
    if df.empty:
        st.warning("Veri bulunamadÄ±.")
        return

    df["sure_saat"] = pd.to_timedelta(df["sure"]).dt.total_seconds() / 3600

    # === TARÄ°H ARALIÄžI SEÃ‡Ä°MÄ° ===
    min_date = df["plan_tarihi"].min()
    max_date = df["plan_tarihi"].max()
    col1, col2 = st.columns(2)
    with col1:
        tarih1 = st.date_input("BaÅŸlangÄ±Ã§ Tarihi", min_value=min_date, max_value=max_date, value=min_date)
    with col2:
        tarih2 = st.date_input("BitiÅŸ Tarihi", min_value=min_date, max_value=max_date, value=max_date)

    tarih1 = pd.to_datetime(tarih1)
    tarih2 = pd.to_datetime(tarih2)
    # Tarih aralÄ±ÄŸÄ±na gÃ¶re filtrele
    mask = (df["plan_tarihi"] >= tarih1) & (df["plan_tarihi"] <= tarih2)
    df_aralik = df[mask].copy()

    # ---- ZEKÄ° OTOMATÄ°K Ä°STATÄ°STÄ°KLER ----
    toplam_saat = df_aralik["sure_saat"].sum()
    ort_gunluk = df_aralik.groupby("plan_tarihi")["sure_saat"].sum().mean()
    min_gun = df_aralik.groupby("plan_tarihi")["sure_saat"].sum().min()
    max_gun = df_aralik.groupby("plan_tarihi")["sure_saat"].sum().max()
    hic_ucus_olmayan_gunler = pd.date_range(tarih1, tarih2).difference(df_aralik["plan_tarihi"].unique())
    populer_tip = df_aralik.groupby("gorev_tipi")["sure_saat"].sum().idxmax() if not df_aralik.empty else None

    st.success(f"""
        **Tarih AralÄ±ÄŸÄ±: {tarih1.date()} â€“ {tarih2.date()}**
        \n- Toplam UÃ§uÅŸ SÃ¼resi: **{toplam_saat:.2f} saat**
        \n- GÃ¼nlÃ¼k Ortalama: **{ort_gunluk:.2f} saat**
        \n- En yÃ¼ksek uÃ§ulan gÃ¼n: **{max_gun:.2f} saat**
        \n- En dÃ¼ÅŸÃ¼k (uÃ§uÅŸ yapÄ±lan) gÃ¼n: **{min_gun:.2f} saat**
        \n- En Ã§ok uÃ§ulan gÃ¶rev tipi: **{populer_tip}**
        \n- HiÃ§ uÃ§uÅŸ olmayan gÃ¼n(ler): {'Yok' if len(hic_ucus_olmayan_gunler)==0 else ', '.join(str(g.date()) for g in hic_ucus_olmayan_gunler[:5])}
        """)

    # ==== TÃ¼m GÃ¶rev Tipleri: GÃ¼nlÃ¼k Toplam ====
    st.markdown("## ðŸ”· Toplam UÃ§uÅŸ SÃ¼resi (GÃ¼nlÃ¼k)")
    df_gunluk_total = df_aralik.groupby("plan_tarihi")["sure_saat"].sum().reset_index().sort_values("plan_tarihi")

    st.line_chart(
        df_gunluk_total.set_index("plan_tarihi"),
        height=300,
        use_container_width=True
    )
    st.dataframe(df_gunluk_total, use_container_width=True)

    # GÃ¶rev tipleri
    gorev_tipleri = df_aralik["gorev_tipi"].dropna().unique().tolist()
    gorev_tipleri.sort()

    selected_tips = st.multiselect(
        "GÃ¶sterilecek GÃ¶rev Tiplerini SeÃ§in", 
        options=gorev_tipleri, 
        default=gorev_tipleri,
        key="tarihsel_gorev_tipleri"
    )

    # ==== Her GÃ¶rev Tipi: GÃ¼nlÃ¼k Grafik ====
    for tip in selected_tips:
        st.markdown(f"---\n## {tip}")
        df_tip = df_aralik[df_aralik["gorev_tipi"] == tip]
        df_gunluk = df_tip.groupby("plan_tarihi")["sure_saat"].sum().reset_index().sort_values("plan_tarihi")

        st.line_chart(
            df_gunluk.set_index("plan_tarihi"),
            height=250,
            use_container_width=True
        )
        st.dataframe(df_gunluk, use_container_width=True)
        # AkÄ±llÄ± Ã¶zet
        st.info(
            f"- Toplam: {df_tip['sure_saat'].sum():.2f} saat | "
            f"Ortalama: {df_gunluk['sure_saat'].mean():.2f} saat/gÃ¼n | "
            f"GÃ¼n sayÄ±sÄ±: {df_gunluk['plan_tarihi'].nunique()}"
        )

    # ==== Excel Rapor Butonu (Tarih aralÄ±ÄŸÄ±na gÃ¶re, grafikler + Ã¶zet) ====
    st.markdown("### ðŸ“¥ Excel Raporu (Grafik+Ã–zet) Ä°ndir")
    excel_rapor_grafikli_indir(st, df_aralik, df_gunluk_total, selected_tips, tarih1, tarih2)
    tarihsel_akilli_ozet_panel(st, conn, tarih1, tarih2, df_aralik)

# -- GRAFÄ°KLÄ° EXCEL EXPORT, AKILLI Ã–ZETLERLE --
def excel_rapor_grafikli_indir(st, df_aralik, df_gunluk_total, selected_tips, tarih1, tarih2):
    import matplotlib.pyplot as plt
    import tempfile
    import os
    import io
    from openpyxl import load_workbook
    from openpyxl.drawing.image import Image as XLImage

    tmpdir = tempfile.mkdtemp()
    # GENEL TOPLAM GRAFÄ°K
    path_total = os.path.join(tmpdir, "tarihsel_total.png")
    plt.figure(figsize=(8,3))
    plt.plot(df_gunluk_total["plan_tarihi"], df_gunluk_total["sure_saat"], marker="o")
    plt.title("Toplam UÃ§uÅŸ SÃ¼resi (GÃ¼nlÃ¼k)")
    plt.xlabel("Tarih")
    plt.ylabel("Saat")
    plt.tight_layout()
    plt.grid(True, linestyle="--", alpha=0.5)
    plt.savefig(path_total)
    plt.close()

    # Her gÃ¶rev tipi iÃ§in grafikler
    tip_graf_paths = []
    for tip in selected_tips:
        df_tip = df_aralik[df_aralik["gorev_tipi"] == tip]
        df_gunluk = df_tip.groupby("plan_tarihi")["sure_saat"].sum().reset_index()
        if df_gunluk.empty:
            continue
        pth = os.path.join(tmpdir, f"tip_{tip}.png")
        plt.figure(figsize=(7,2.5))
        plt.plot(df_gunluk["plan_tarihi"], df_gunluk["sure_saat"], marker=".")
        plt.title(f"GÃ¶rev Tipi: {tip}")
        plt.xlabel("Tarih")
        plt.ylabel("Saat")
        plt.grid(True, linestyle="--", alpha=0.5)
        plt.tight_layout()
        plt.savefig(pth)
        plt.close()
        tip_graf_paths.append((tip, pth))

    # EXCEL YAZ
    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        # Ã–zet sheet
        summary = {
            "Tarih BaÅŸlangÄ±Ã§": tarih1.date(),
            "Tarih BitiÅŸ": tarih2.date(),
            "Toplam UÃ§uÅŸ Saati": df_aralik["sure_saat"].sum(),
            "Ortalama GÃ¼nlÃ¼k": df_aralik.groupby("plan_tarihi")["sure_saat"].sum().mean(),
            "En Ã§ok uÃ§ulan gÃ¶rev tipi": df_aralik.groupby("gorev_tipi")["sure_saat"].sum().idxmax() if not df_aralik.empty else "-",
        }
        pd.DataFrame([summary]).to_excel(writer, index=False, sheet_name="Ã–zet")

        # Genel toplam/gÃ¼nlÃ¼k sheet
        df_gunluk_total.to_excel(writer, index=False, sheet_name="GÃ¼nlÃ¼k Toplam")
        # Her gÃ¶rev tipi ayrÄ± sheet
        for tip in selected_tips:
            df_tip = df_aralik[df_aralik["gorev_tipi"] == tip]
            df_gunluk = df_tip.groupby("plan_tarihi")["sure_saat"].sum().reset_index()
            df_gunluk.to_excel(writer, index=False, sheet_name=f"Tip_{tip[:25]}")

    # Grafik ekle
    excel_buffer.seek(0)
    wb = load_workbook(excel_buffer)
    ws = wb["GÃ¼nlÃ¼k Toplam"]
    img = XLImage(path_total)
    ws.add_image(img, "E2")

    for tip, pth in tip_graf_paths:
        ws_tip = wb[f"Tip_{tip[:25]}"]
        ws_tip.add_image(XLImage(pth), "E2")

    # Ã–zet sheet'e de akÄ±llÄ± istatistikler eklenebilir, ÅŸimdilik tablo ÅŸeklinde bÄ±rakÄ±ldÄ±
    out_buf = io.BytesIO()
    wb.save(out_buf)
    out_buf.seek(0)

    st.download_button(
        label="ðŸ“¥ SeÃ§ilen Tarih AralÄ±ÄŸÄ±na GÃ¶re Grafikli Excel Raporu Ä°ndir",
        data=out_buf,
        file_name=f"ucus_analiz_{tarih1.date()}_{tarih2.date()}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )



# === EKLE: ðŸŽ¯ AkÄ±llÄ± Ã–zet â€” Takvime GÃ¶re + Excel Raporu (HH:MM) ===
def tarihsel_akilli_ozet_panel(st, conn, tarih1, tarih2, df_aralik):
    """
    - TÃ¼m metrikler SEÃ‡Ä°LEN TARÄ°H ARALIÄžINA gÃ¶re hesaplanÄ±r.
    - 'GÃ¼nlÃ¼k (UÃ§uÅŸ GÃ¼nleri)' YOK. Sadece 'GÃ¼nlÃ¼k (Takvim)' vardÄ±r.
    - Panelde gÃ¶rÃ¼nen verilerin tamamÄ± Excel raporu olarak indirilebilir.
    - TÃ¼m saatler HH:MM formatÄ±nda gÃ¶sterilir ve rapora Ã¶yle yazÄ±lÄ±r (metin).
    """
    import pandas as pd
    from datetime import date
    import io

    def _to_hours(s):
        try:
            if pd.isna(s) or str(s).strip() == "" or str(s).strip().lower() == "nan":
                return 0.0
            td = pd.to_timedelta(str(s))
            return td.total_seconds() / 3600.0
        except Exception:
            try:
                return float(s)
            except Exception:
                return 0.0

    def _fmt_hhmm(hours_float: float) -> str:
        minutes = int(round(float(hours_float) * 60))
        hh, mm = divmod(minutes, 60)
        return f"{hh:02d}:{mm:02d}"

    # --- GÃ¼venli giriÅŸ: df_aralik boÅŸsa uyar ve Ã§Ä±k ---
    if df_aralik is None or df_aralik.empty:
        st.warning("SeÃ§ilen tarih aralÄ±ÄŸÄ±nda veri bulunamadÄ±.")
        return

    # --- SeÃ§ilen aralÄ±k (tarih1â€“tarih2) verisi ---
    rng_min = pd.to_datetime(tarih1).normalize()
    rng_max = pd.to_datetime(tarih2).normalize()

    df_range = df_aralik.copy()
    df_range["plan_tarihi"] = pd.to_datetime(df_range["plan_tarihi"]).dt.normalize()
    if "sure_saat" not in df_range.columns and "sure" in df_range.columns:
        df_range["sure_saat"] = df_range["sure"].apply(_to_hours)

    # --- GÃ¼nlÃ¼k toplamlar (SEÃ‡Ä°LEN ARALIK) ---
    gunluk = (
        df_range.groupby("plan_tarihi")["sure_saat"]
        .sum()
        .sort_index()
    )
    total_hours    = gunluk.sum()
    flown_days     = gunluk.index.nunique()
    calendar_days  = (rng_max - rng_min).days + 1
    full_range     = pd.date_range(rng_min, rng_max, freq="D").normalize()
    not_flown_cnt  = max(len(full_range) - flown_days, 0)

    # --- Kalan plan & hedef (yalnÄ±z TAKVÄ°M gÃ¼nÃ¼ne bÃ¶lÃ¼nÃ¼r) ---
    today       = pd.Timestamp(date.today()).normalize()
    start_point = max(today, rng_min)
    if start_point > rng_max:
        remaining_total = 0.0
        remaining_days  = 0
        kalan_tip = pd.DataFrame(columns=["gorev_tipi","kalan_saat"])
    else:
        kalan_df = df_range[df_range["plan_tarihi"] >= start_point]
        remaining_total = kalan_df["sure_saat"].sum()
        remaining_days  = (rng_max - start_point).days + 1

        kalan_tip = (
            kalan_df
            .assign(gorev_tipi=lambda d: d["gorev_tipi"].fillna("Bilinmiyor"))
            .groupby("gorev_tipi", dropna=False)["sure_saat"]
            .sum()
            .reset_index()
            .sort_values("sure_saat", ascending=False)
            .rename(columns={"sure_saat": "kalan_saat"})
        )

    hedef_gun_takvim = (remaining_total / remaining_days) if remaining_days > 0 else 0.0
    kalan_tip["gunluk_takvim"] = kalan_tip["kalan_saat"] / max(remaining_days, 1)

    # --- UI (tamamÄ± seÃ§ilen aralÄ±ÄŸa gÃ¶re) ---
    st.markdown(f"### ðŸŽ¯ AkÄ±llÄ± Ã–zet â€” SeÃ§ili AralÄ±k: {rng_min.date()}â€“{rng_max.date()} (HH:MM)")

    c1, c2, c3 = st.columns(3)
    c1.metric("Toplam Plan (seÃ§ili aralÄ±k)", _fmt_hhmm(total_hours))
    c2.metric("UÃ§ulan GÃ¼n (seÃ§ili aralÄ±k)", f"{flown_days} gÃ¼n")
    c3.metric("UÃ§ulmayan GÃ¼n (seÃ§ili aralÄ±k)", f"{not_flown_cnt} gÃ¼n")

    st.info(
        f"**Kalan plan (baÅŸlangÄ±Ã§ = {start_point.date()} â†’ {rng_max.date()}): "
        f"{_fmt_hhmm(remaining_total)}**"
    )
    st.metric("Gerekli gÃ¼nlÃ¼k (takvim gÃ¼nÃ¼ne bÃ¶lÃ¼nmÃ¼ÅŸ)", _fmt_hhmm(hedef_gun_takvim))

    # --- GÃ¶rev tipi bazÄ±nda yalnÄ±z 'GÃ¼nlÃ¼k (Takvim)' tablo ---
    st.markdown("### ðŸ§® GÃ¶rev Tipi BazÄ±nda GÃ¼nlÃ¼k Gerekli (Takvim) â€” HH:MM")
    if not kalan_tip.empty:
        df_show = kalan_tip[["gorev_tipi","kalan_saat","gunluk_takvim"]].copy()
        df_show["kalan_saat"]    = df_show["kalan_saat"].apply(_fmt_hhmm)
        df_show["gunluk_takvim"] = df_show["gunluk_takvim"].apply(_fmt_hhmm)
        df_show.columns = ["GÃ¶rev Tipi","Kalan Saat","GÃ¼nlÃ¼k (Takvim)"]
        st.dataframe(df_show, use_container_width=True)
    else:
        st.caption("SeÃ§ilen aralÄ±k iÃ§in kalan gÃ¶rev tipi hedefi bulunmuyor.")

    # â€” SeÃ§ili aralÄ±ÄŸÄ±n kÄ±sa Ã¶zeti (HH:MM)
    if not gunluk.empty:
        st.caption(
            f"Ã–zet â€” Toplam: {_fmt_hhmm(total_hours)} | "
            f"GÃ¼nlÃ¼k ort. (uÃ§ulan): {_fmt_hhmm(gunluk.mean())} | "
            f"En yÃ¼ksek gÃ¼n: {_fmt_hhmm(gunluk.max())}"
        )

    # === ðŸ“¥ RAPOR OLUÅžTUR â€” AkÄ±llÄ± Ã–zet (Excel) ===
    st.markdown("#### ðŸ“¥ AkÄ±llÄ± Ã–zet Raporu (Excel) â€” SeÃ§ilen AralÄ±k")
    try:
        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as writer:
            # 1) AkÄ±llÄ± Ã–zet (tek satÄ±rlÄ±k metrikler)
            ozet_rows = [
                {"Alan": "SeÃ§ili AralÄ±k", "DeÄŸer": f"{rng_min.date()} â€“ {rng_max.date()}"},
                {"Alan": "Toplam Plan (seÃ§ili aralÄ±k)", "DeÄŸer": _fmt_hhmm(total_hours)},
                {"Alan": "UÃ§ulan GÃ¼n", "DeÄŸer": f"{flown_days}"},
                {"Alan": "UÃ§ulmayan GÃ¼n", "DeÄŸer": f"{not_flown_cnt}"},
                {"Alan": "Kalan Plan (baÅŸlangÄ±Ã§ â†’ bitiÅŸ)", "DeÄŸer": _fmt_hhmm(remaining_total)},
                {"Alan": "Gerekli GÃ¼nlÃ¼k (Takvim)", "DeÄŸer": _fmt_hhmm(hedef_gun_takvim)},
                {"Alan": "Ã–zet (uÃ§ulan gÃ¼n ort.)", "DeÄŸer": _fmt_hhmm(gunluk.mean() if len(gunluk)>0 else 0.0)},
                {"Alan": "Ã–zet (en yÃ¼ksek gÃ¼n)", "DeÄŸer": _fmt_hhmm(gunluk.max() if len(gunluk)>0 else 0.0)},
            ]
            pd.DataFrame(ozet_rows).to_excel(writer, index=False, sheet_name="Akilli_Ozet")

            # 2) Tip BazlÄ± GÃ¼nlÃ¼k Gerekli (yalnÄ±z takvim)
            if not kalan_tip.empty:
                tip_df = kalan_tip[["gorev_tipi","kalan_saat","gunluk_takvim"]].copy()
                tip_df["kalan_saat"]    = tip_df["kalan_saat"].apply(_fmt_hhmm)
                tip_df["gunluk_takvim"] = tip_df["gunluk_takvim"].apply(_fmt_hhmm)
                tip_df.columns = ["GÃ¶rev Tipi","Kalan Saat","GÃ¼nlÃ¼k (Takvim)"]
                tip_df.to_excel(writer, index=False, sheet_name="Tip_Bazli_Gunluk")

            # 3) GÃ¼nlÃ¼k Toplam (seÃ§ilen aralÄ±ktaki her gÃ¼n)
            if not gunluk.empty:
                gt = gunluk.reset_index().rename(columns={"plan_tarihi": "Tarih", "sure_saat": "Toplam Saat"})
                gt["Toplam Saat"] = gt["Toplam Saat"].apply(_fmt_hhmm)
                gt.to_excel(writer, index=False, sheet_name="Gunluk_Toplam")

        buf.seek(0)
        st.download_button(
            label="ðŸ“¥ AkÄ±llÄ± Ã–zet Raporunu Ä°ndir (Excel)",
            data=buf,
            file_name=f"akilli_ozet_{rng_min.date()}_{rng_max.date()}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="akil_ozet_rapor_indir"
        )
    except Exception as e:
        st.error(f"Rapor oluÅŸturulurken hata: {e}")

# --- Ã‡aÄŸrÄ± Ã¶rneÄŸi (zaten mevcutsa dokunma) ---
# tab_tarihsel_analiz(...) fonksiyonunun en sonunda:
# tarihsel_akilli_ozet_panel(st, conn, tarih1, tarih2, df_aralik)
